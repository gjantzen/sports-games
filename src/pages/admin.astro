---
export const prerender = false;

import Layout from "@/layouts/Layout.astro";

interface MetaTag {
  property: string;
  value: string;
}

const session = Astro.cookies.get('session');
if (!session || session.value !== 'authenticated') {
  return Astro.redirect('/login');
}

let message = '';
let buildTriggerMessage = '';

// Handle form submissions
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const action = formData.get('action');

  if (action === 'logout') {
    Astro.cookies.delete('session');
    return Astro.redirect('/login');
  } else if (action === 'updateMetaTags') {
    const videoId = formData.get('videoId') as string;
    const opponent = formData.get('opponent') as string;
    const score = formData.get('score') as string;
    const date = formData.get('date') as string;
    const location = formData.get('location') as string;

    const API_KEY = Astro.locals.runtime.env.BUNNY_CDN_API_KEY as string;
    const LIBRARY_ID = Astro.locals.runtime.env.PUBLIC_BUNNY_STREAM_LIBRARY_ID as string;

    if (!API_KEY || !LIBRARY_ID) {
      message = 'Server configuration error';
    } else {
      const metaTags: MetaTag[] = [
        { property: "opponent", value: opponent },
        { property: "score", value: score },
        { property: "date", value: date },
        { property: "location", value: location }
      ].filter(tag => tag.value && tag.value.trim() !== '');


      try {
        const url = `https://video.bunnycdn.com/library/${LIBRARY_ID}/videos/${videoId}`;
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'AccessKey': API_KEY
          },
          body: JSON.stringify({ metaTags }),
        });

        if (!response.ok) {
          const errorBody = await response.text();
          throw new Error(`Failed to update metaTags: ${response.status}. Details: ${errorBody}`);
        }

        const responseData = await response.json();
        console.log('Server response:', JSON.stringify(responseData, null, 2));

        message = 'MetaTags updated successfully!';
      } catch (error) {
        console.error('Error updating metaTags:', error);
        message = 'Failed to update metaTags. Please try again.';
      }
    }
  } else if (action === 'rebuild') {
    try {
      const response = await fetch('/trigger-build', { method: 'POST' });
      if (response.ok) {
        buildTriggerMessage = 'New build triggered successfully.';
      } else {
        const errorText = await response.text();
        buildTriggerMessage = `Failed to trigger new build: ${errorText}`;
      }
    } catch (error) {
      console.error('Error triggering build:', error);
      buildTriggerMessage = `Error triggering build: ${error instanceof Error ? error.message : String(error)}`;
    }
  }
}
---

<Layout pageTitle="Admin Dashboard">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">Admin Dashboard</h1>
    <p class="mb-6">This is a protected page. Only authenticated users have access.</p>

    <div class="mb-8 bg-carrot-orange-100 p-10 rounded-xl drop-shadow-md">
      <h2 class="text-2xl font-semibold mb-4">Update Video Metadata</h2>
      <form method="POST" class="space-y-4">
        <input type="hidden" name="action" value="updateMetaTags">
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label for="videoId" class="block text-sm font-medium text-gray-700 mb-1">Video ID</label>
            <input id="videoId" name="videoId" required class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
          </div>
          <div>
            <label for="opponent" class="block text-sm font-medium text-gray-700 mb-1">Opponent</label>
            <input id="opponent" name="opponent" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
          </div>
          <div>
            <label for="score" class="block text-sm font-medium text-gray-700 mb-1">Score</label>
            <input id="score" name="score" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
          </div>
          <div>
            <label for="date" class="block text-sm font-medium text-gray-700 mb-1">Date</label>
            <input id="date" name="date" type="date" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
          </div>
        </div>
        <div>
          <label for="location" class="block text-sm font-medium text-gray-700 mb-1">Location</label>
          <input id="location" name="location" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
        </div>
        <div class="mt-6">
          <button type="submit" class="bg-orange-600 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50">
            Update
          </button>
        </div>
      </form>

      {message && (
        <div class="mt-4 p-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-md" role="alert">
          <strong class="font-bold">Message:</strong>
          <span class="block sm:inline">{message}</span>
        </div>
      )}
    </div>
    <div class="flex justify-between">
      <div>
      <form method="POST" class="mt-8">
        <input type="hidden" name="action" value="rebuild">
        <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
          Rebuild App
        </button>
      </form>
      {buildTriggerMessage && (
        <div class="mt-4 p-4 bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-md" role="alert">
          <strong class="font-bold">Build Status:</strong>
          <span class="block sm:inline">{buildTriggerMessage}</span>
        </div>
      )}
      </div>
      <form method="POST" class="mt-8">
        <input type="hidden" name="action" value="logout">
        <button type="submit" class="bg-red-600 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded">
          Log Out
        </button>
      </form>
  </div>
  </div>
</Layout>